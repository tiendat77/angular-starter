/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Optional, ViewEncapsulation, } from '@angular/core';
import { DATE_FORMATS } from '../adapter';
import { getActiveOffset, isSameMultiYearView, yearsPerPage } from './multi-year-view';
import { Calendar } from './calendar';
import * as i0 from "@angular/core";
import * as i1 from "../adapter";
import * as i2 from "./calendar";
let calendarHeaderId = 1;
/** Default header for MatCalendar */
export class CalendarHeader {
    calendar;
    _dateAdapter;
    _dateFormats;
    constructor(calendar, _dateAdapter, _dateFormats, changeDetectorRef) {
        this.calendar = calendar;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());
    }
    /** The display text for the current calendar view. */
    get periodButtonText() {
        if (this.calendar.currentView == 'month') {
            return this._dateAdapter
                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)
                .toLocaleUpperCase();
        }
        if (this.calendar.currentView == 'year') {
            return this._dateAdapter.getYearName(this.calendar.activeDate);
        }
        const [start, end] = this._formatMinAndMaxYearLabels();
        return `${start} \u2013 ${end}`;
    }
    /** The aria description for the current calendar view. */
    get periodButtonDescription() {
        if (this.calendar.currentView == 'month') {
            return this._dateAdapter
                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)
                .toLocaleUpperCase();
        }
        if (this.calendar.currentView == 'year') {
            return this._dateAdapter.getYearName(this.calendar.activeDate);
        }
        // Format a label for the window of years displayed in the multi-year calendar view. Use
        // `formatYearRangeLabel` because it is TTS friendly.
        const [start, end] = this._formatMinAndMaxYearLabels();
        return `${start} \u2013 ${end}`;
    }
    /** The `aria-label` for changing the calendar view. */
    get periodButtonLabel() {
        // TODO: translate
        return this.calendar.currentView == 'month' ? 'Choose month and year' : 'Choose date';
    }
    /** The label for the previous button. */
    get prevButtonLabel() {
        // TODO: translate
        return {
            month: 'Previous month',
            year: 'Previous year',
            'multi-year': 'Previous 24 years',
        }[this.calendar.currentView];
    }
    /** The label for the next button. */
    get nextButtonLabel() {
        // TODO: translate
        return {
            month: 'Next month',
            year: 'Next year',
            'multi-year': 'Next 24 years',
        }[this.calendar.currentView];
    }
    /** Handles user clicks on the period label. */
    currentPeriodClicked() {
        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';
    }
    /** Handles user clicks on the previous button. */
    previousClicked() {
        this.calendar.activeDate =
            this.calendar.currentView == 'month'
                ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)
                : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);
    }
    /** Handles user clicks on the next button. */
    nextClicked() {
        this.calendar.activeDate =
            this.calendar.currentView == 'month'
                ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)
                : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);
    }
    /** Whether the previous period button is enabled. */
    previousEnabled() {
        if (!this.calendar.minDate) {
            return true;
        }
        return (!this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate));
    }
    /** Whether the next period button is enabled. */
    nextEnabled() {
        return (!this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate));
    }
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    _isSameView(date1, date2) {
        if (this.calendar.currentView == 'month') {
            return (this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&
                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2));
        }
        if (this.calendar.currentView == 'year') {
            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);
    }
    /**
     * Format two individual labels for the minimum year and maximum year available in the multi-year
     * calendar view. Returns an array of two strings where the first string is the formatted label
     * for the minimum year, and the second string is the formatted label for the maximum year.
     */
    _formatMinAndMaxYearLabels() {
        // The offset from the active year to the "slot" for the starting year is the
        // *actual* first rendered year in the multi-year view, and the last year is
        // just yearsPerPage - 1 away.
        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);
        const minYearOfPage = activeYear -
            getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);
        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;
        const minYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));
        const maxYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));
        return [minYearLabel, maxYearLabel];
    }
    _id = `calendar-header-${calendarHeaderId++}`;
    _periodButtonLabelId = `${this._id}-period-label`;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: CalendarHeader, deps: [{ token: forwardRef(() => Calendar) }, { token: i1.DateAdapter, optional: true }, { token: DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: CalendarHeader, isStandalone: true, selector: "calendar-header", exportAs: ["calendarHeader"], ngImport: i0, template: "<div class=\"px-3 pt-2.5 pb-0 flex items-center justify-between\">\n  <!-- [Firefox Issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1880533]\n    Relocated label next to related button and made visually hidden via cdk-visually-hidden\n    to enable label to appear in a11y tree for SR when using Firefox -->\n  <label\n    class=\"hidden cdk-visually-hidden\"\n    for=\"\"\n    [id]=\"_periodButtonLabelId\"\n  >\n    {{ periodButtonDescription }}\n  </label>\n\n  <button\n    class=\"btn btn-ghost\"\n    aria-live=\"polite\"\n    [attr.aria-label]=\"periodButtonLabel\"\n    [attr.aria-describedby]=\"_periodButtonLabelId\"\n    (click)=\"currentPeriodClicked()\"\n  >\n    <span aria-hidden=\"true\">{{ periodButtonText }}</span>\n\n    <svg\n      class=\"w-3 h-3\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"3\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"m19.5 8.25-7.5 7.5-7.5-7.5\"\n      />\n    </svg>\n  </button>\n\n  <div class=\"flex-auto\"></div>\n\n  <ng-content />\n\n  <button\n    type=\"button\"\n    class=\"btn btn-ghost btn-circle btn-sm\"\n    [disabled]=\"!previousEnabled()\"\n    [attr.aria-label]=\"prevButtonLabel\"\n    (click)=\"previousClicked()\"\n  >\n    <svg\n      class=\"w-6 h-6\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"2\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M15.75 19.5 8.25 12l7.5-7.5\"\n      />\n    </svg>\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn-ghost btn-circle btn-sm\"\n    [disabled]=\"!nextEnabled()\"\n    [attr.aria-label]=\"nextButtonLabel\"\n    (click)=\"nextClicked()\"\n  >\n    <svg\n      class=\"w-6 h-6\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"2\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"\n      />\n    </svg>\n  </button>\n</div>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: CalendarHeader, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'calendar-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'calendarHeader', template: "<div class=\"px-3 pt-2.5 pb-0 flex items-center justify-between\">\n  <!-- [Firefox Issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1880533]\n    Relocated label next to related button and made visually hidden via cdk-visually-hidden\n    to enable label to appear in a11y tree for SR when using Firefox -->\n  <label\n    class=\"hidden cdk-visually-hidden\"\n    for=\"\"\n    [id]=\"_periodButtonLabelId\"\n  >\n    {{ periodButtonDescription }}\n  </label>\n\n  <button\n    class=\"btn btn-ghost\"\n    aria-live=\"polite\"\n    [attr.aria-label]=\"periodButtonLabel\"\n    [attr.aria-describedby]=\"_periodButtonLabelId\"\n    (click)=\"currentPeriodClicked()\"\n  >\n    <span aria-hidden=\"true\">{{ periodButtonText }}</span>\n\n    <svg\n      class=\"w-3 h-3\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"3\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"m19.5 8.25-7.5 7.5-7.5-7.5\"\n      />\n    </svg>\n  </button>\n\n  <div class=\"flex-auto\"></div>\n\n  <ng-content />\n\n  <button\n    type=\"button\"\n    class=\"btn btn-ghost btn-circle btn-sm\"\n    [disabled]=\"!previousEnabled()\"\n    [attr.aria-label]=\"prevButtonLabel\"\n    (click)=\"previousClicked()\"\n  >\n    <svg\n      class=\"w-6 h-6\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"2\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M15.75 19.5 8.25 12l7.5-7.5\"\n      />\n    </svg>\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn-ghost btn-circle btn-sm\"\n    [disabled]=\"!nextEnabled()\"\n    [attr.aria-label]=\"nextButtonLabel\"\n    (click)=\"nextClicked()\"\n  >\n    <svg\n      class=\"w-6 h-6\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"2\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"\n      />\n    </svg>\n  </button>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i2.Calendar, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => Calendar)]
                }] }, { type: i1.DateAdapter, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DATE_FORMATS]
                }] }, { type: i0.ChangeDetectorRef }] });
//# sourceMappingURL=data:application/json;base64,