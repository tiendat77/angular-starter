/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, Inject, Optional, } from '@angular/core';
import { NgClass } from '@angular/common';
import { Subject, Subscription } from 'rxjs';
import { animations } from '../utils/animations';
import { DATE_FORMATS } from '../adapter/date-formats';
import { Calendar } from '../calendar/calendar';
import { DateRange, } from './date-selection-model';
import * as i0 from "@angular/core";
import * as i1 from "./date-selection-model";
import * as i2 from "../adapter/date-adapter";
/**
 * Component used as the content for the datepicker overlay. We use this instead of using
 * Calendar directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the overlay that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 * @docs-private
 */
export class DatepickerContent {
    _elementRef;
    _changeDetectorRef;
    _globalModel;
    _dateAdapter;
    _dateFormats;
    _subscriptions = new Subscription();
    _model;
    /** Reference to the internal calendar component. */
    _calendar;
    /** Reference to the datepicker that created the overlay. */
    datepicker;
    /** Start of the comparison range. */
    comparisonStart;
    /** End of the comparison range. */
    comparisonEnd;
    /** ARIA Accessible name of the `<input startDate/>` */
    startDateAccessibleName;
    /** ARIA Accessible name of the `<input endDate/>` */
    endDateAccessibleName;
    /** Whether the datepicker is above or below the input. */
    _isAbove;
    /** Current state of the animation. */
    _animationState;
    /** Emits when an animation has finished. */
    _animationDone = new Subject();
    /** Whether there is an in-progress animation. */
    _isAnimating = false;
    /** Whether the close button currently has focus. */
    _closeButtonFocused;
    /** Id of the label for the `role="dialog"` element. */
    _dialogLabelId;
    constructor(_elementRef, _changeDetectorRef, _globalModel, _dateAdapter, _dateFormats) {
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._globalModel = _globalModel;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
    }
    ngOnInit() {
        this._animationState = this.datepicker.touchUi ? 'enter-dialog' : 'enter-dropdown';
    }
    ngAfterViewInit() {
        this._subscriptions.add(this.datepicker.stateChanges.subscribe(() => {
            this._changeDetectorRef.markForCheck();
        }));
        this._calendar.focusActiveCell();
    }
    ngOnDestroy() {
        this._subscriptions.unsubscribe();
        this._animationDone.complete();
    }
    _handleUserSelection(event) {
        const selection = this._model.selection;
        const value = event.value;
        const isRange = selection instanceof DateRange;
        if (value && (isRange || !this._dateAdapter.sameDate(value, selection))) {
            this._model.add(value);
        }
        if (!this._model || this._model.isComplete()) {
            this.datepicker.close();
        }
    }
    _handleUserDragDrop(event) {
        this._model.updateSelection(event.value, this);
    }
    _startExitAnimation() {
        this._animationState = 'void';
        this._changeDetectorRef.markForCheck();
    }
    _handleAnimationEvent(event) {
        this._isAnimating = event.phaseName === 'start';
        if (!this._isAnimating) {
            this._animationDone.next();
        }
    }
    _getSelected() {
        return this._model?.selection;
    }
    _getSelectedDisplay() {
        const selected = this._model.selection || this._dateAdapter.today();
        return selected
            ? this._dateAdapter.format(selected, this._dateFormats.display.dayMonthDateLabel)
            : '';
    }
    /** Applies the current pending selection to the global model. */
    _applyPendingSelection() {
        if (this._model !== this._globalModel) {
            this._globalModel.updateSelection(this._model.selection, this);
        }
    }
    /**
     * @param forceRerender
     */
    _assignModel(forceRerender) {
        this._model = this._globalModel;
        if (forceRerender) {
            this._changeDetectorRef.detectChanges();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: DatepickerContent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.DateSelectionModel }, { token: i2.DateAdapter }, { token: DATE_FORMATS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: DatepickerContent, isStandalone: true, selector: "datepicker-content", host: { listeners: { "@transformPanel.start": "_handleAnimationEvent($event)", "@transformPanel.done": "_handleAnimationEvent($event)" }, properties: { "@transformPanel": "_animationState", "class.datepicker-content-touch": "datepicker.touchUi" }, classAttribute: "datepicker-content" }, viewQueries: [{ propertyName: "_calendar", first: true, predicate: Calendar, descendants: true }], exportAs: ["datepickerContent"], ngImport: i0, template: "<div\n  cdkTrapFocus\n  role=\"dialog\"\n  class=\"flex flex-col flex-auto overflow-hidden rounded-lg\"\n  [attr.aria-modal]=\"true\"\n  [attr.aria-labelledby]=\"_dialogLabelId ?? undefined\"\n>\n  <div class=\"flex flex-col px-3 py-2 bg-primary\">\n    <div class=\"flex flex-col\">\n      <span class=\"text-xs font-normal tracking-wider uppercase text-primary-content\">\n        Selected date\n      </span>\n    </div>\n    <div class=\"flex flex-col mt-4\">\n      <span class=\"text-xl font-normal text-primary-content\">\n        {{ _getSelectedDisplay() }}\n      </span>\n    </div>\n  </div>\n\n  <calendar\n    class=\"flex-auto\"\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker._getMinDate()\"\n    [maxDate]=\"datepicker._getMaxDate()\"\n    [dateFilter]=\"datepicker._getDateFilter()\"\n    [headerComponent]=\"datepicker.calendarHeaderComponent\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker.dateClass\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [@fadeInCalendar]=\"'enter'\"\n    [startDateAccessibleName]=\"startDateAccessibleName\"\n    [endDateAccessibleName]=\"endDateAccessibleName\"\n    (yearSelected)=\"datepicker._selectYear($event)\"\n    (monthSelected)=\"datepicker._selectMonth($event)\"\n    (viewChanged)=\"datepicker._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n    (_userDragDrop)=\"_handleUserDragDrop($event)\"\n  />\n\n  <div class=\"flex items-center justify-end w-full gap-3 px-3 py-3\">\n    <button\n      type=\"button\"\n      class=\"btn\"\n      [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n      (focus)=\"_closeButtonFocused = true\"\n      (blur)=\"_closeButtonFocused = false\"\n      (click)=\"datepicker.close()\"\n    >\n      Close\n    </button>\n\n    <button\n      type=\"button\"\n      class=\"btn btn-primary\"\n      (click)=\"datepicker.apply()\"\n    >\n      Apply\n    </button>\n  </div>\n</div>\n", styles: [".datepicker-content{position:relative;display:flex;flex-direction:column;border-radius:.5rem;background-color:oklch(var(--b1));box-shadow:0 0 #0000,0 0 #0000,rgba(var(--shadow-card-rgb),.2) 0 8px 24px}.datepicker-content .calendar{width:22rem;height:24rem}.datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.datepicker-content-touch{display:block;max-height:80vh;position:relative;overflow:visible}.datepicker-content-touch .datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.datepicker-content-touch .calendar{width:100%;height:auto}@media all and (orientation: landscape){.datepicker-content-touch .datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.datepicker-content-touch .datepicker-content-container{width:80vw;height:100vw}}\n"], dependencies: [{ kind: "component", type: Calendar, selector: "calendar", inputs: ["headerComponent", "startAt", "startView", "selected", "minDate", "maxDate", "dateFilter", "dateClass", "comparisonStart", "comparisonEnd", "startDateAccessibleName", "endDateAccessibleName"], outputs: ["selectedChange", "yearSelected", "monthSelected", "viewChanged", "_userSelection", "_userDragDrop"], exportAs: ["calendar"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [animations.transformPanel, animations.fadeInCalendar], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: DatepickerContent, decorators: [{
            type: Component,
            args: [{ selector: 'datepicker-content', host: {
                        class: 'datepicker-content',
                        '[@transformPanel]': '_animationState',
                        '(@transformPanel.start)': '_handleAnimationEvent($event)',
                        '(@transformPanel.done)': '_handleAnimationEvent($event)',
                        '[class.datepicker-content-touch]': 'datepicker.touchUi',
                    }, animations: [animations.transformPanel, animations.fadeInCalendar], exportAs: 'datepickerContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [Calendar, NgClass, CdkPortalOutlet], template: "<div\n  cdkTrapFocus\n  role=\"dialog\"\n  class=\"flex flex-col flex-auto overflow-hidden rounded-lg\"\n  [attr.aria-modal]=\"true\"\n  [attr.aria-labelledby]=\"_dialogLabelId ?? undefined\"\n>\n  <div class=\"flex flex-col px-3 py-2 bg-primary\">\n    <div class=\"flex flex-col\">\n      <span class=\"text-xs font-normal tracking-wider uppercase text-primary-content\">\n        Selected date\n      </span>\n    </div>\n    <div class=\"flex flex-col mt-4\">\n      <span class=\"text-xl font-normal text-primary-content\">\n        {{ _getSelectedDisplay() }}\n      </span>\n    </div>\n  </div>\n\n  <calendar\n    class=\"flex-auto\"\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker._getMinDate()\"\n    [maxDate]=\"datepicker._getMaxDate()\"\n    [dateFilter]=\"datepicker._getDateFilter()\"\n    [headerComponent]=\"datepicker.calendarHeaderComponent\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker.dateClass\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [@fadeInCalendar]=\"'enter'\"\n    [startDateAccessibleName]=\"startDateAccessibleName\"\n    [endDateAccessibleName]=\"endDateAccessibleName\"\n    (yearSelected)=\"datepicker._selectYear($event)\"\n    (monthSelected)=\"datepicker._selectMonth($event)\"\n    (viewChanged)=\"datepicker._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n    (_userDragDrop)=\"_handleUserDragDrop($event)\"\n  />\n\n  <div class=\"flex items-center justify-end w-full gap-3 px-3 py-3\">\n    <button\n      type=\"button\"\n      class=\"btn\"\n      [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n      (focus)=\"_closeButtonFocused = true\"\n      (blur)=\"_closeButtonFocused = false\"\n      (click)=\"datepicker.close()\"\n    >\n      Close\n    </button>\n\n    <button\n      type=\"button\"\n      class=\"btn btn-primary\"\n      (click)=\"datepicker.apply()\"\n    >\n      Apply\n    </button>\n  </div>\n</div>\n", styles: [".datepicker-content{position:relative;display:flex;flex-direction:column;border-radius:.5rem;background-color:oklch(var(--b1));box-shadow:0 0 #0000,0 0 #0000,rgba(var(--shadow-card-rgb),.2) 0 8px 24px}.datepicker-content .calendar{width:22rem;height:24rem}.datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.datepicker-content-touch{display:block;max-height:80vh;position:relative;overflow:visible}.datepicker-content-touch .datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.datepicker-content-touch .calendar{width:100%;height:auto}@media all and (orientation: landscape){.datepicker-content-touch .datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.datepicker-content-touch .datepicker-content-container{width:80vw;height:100vw}}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.DateSelectionModel }, { type: i2.DateAdapter }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DATE_FORMATS]
                }] }], propDecorators: { _calendar: [{
                type: ViewChild,
                args: [Calendar]
            }] } });
//# sourceMappingURL=data:application/json;base64,