import { AnimationBuilder } from '@angular/animations';
import { BooleanInput } from '@angular/cdk/coercion';
import { ScrollStrategyOptions } from '@angular/cdk/overlay';
import { Router } from '@angular/router';
import { AfterViewInit, ChangeDetectorRef, OnChanges, OnDestroy, OnInit, ElementRef, EventEmitter, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { NavigationService } from '../navigation.service';
import { ScrollbarDirective } from '@libs/scrollbar';
import { ReplaySubject } from 'rxjs';
import { NavigationItem, VerticalNavigationAppearance, VerticalNavigationMode, VerticalNavigationPosition } from '../navigation.types';
import * as i0 from "@angular/core";
export declare class VerticalNavigationComponent implements OnChanges, OnInit, AfterViewInit, OnDestroy {
    private _document;
    private _animationBuilder;
    private _changeDetectorRef;
    private _elementRef;
    private _renderer2;
    private _router;
    private _scrollStrategyOptions;
    private _navigationService;
    static ngAcceptInputType_inner: BooleanInput;
    static ngAcceptInputType_opened: BooleanInput;
    static ngAcceptInputType_transparentOverlay: BooleanInput;
    appearance: VerticalNavigationAppearance;
    autoCollapse: boolean;
    inner: boolean;
    mode: VerticalNavigationMode;
    name: string;
    navigation: NavigationItem[];
    opened: boolean;
    position: VerticalNavigationPosition;
    transparentOverlay: boolean;
    readonly appearanceChanged: EventEmitter<VerticalNavigationAppearance>;
    readonly modeChanged: EventEmitter<VerticalNavigationMode>;
    readonly openedChanged: EventEmitter<boolean>;
    readonly positionChanged: EventEmitter<VerticalNavigationPosition>;
    private _navigationContentEl;
    activeAsideItemId: string;
    onCollapsableItemCollapsed: ReplaySubject<NavigationItem>;
    onCollapsableItemExpanded: ReplaySubject<NavigationItem>;
    onRefreshed: ReplaySubject<boolean>;
    private _animationsEnabled;
    private _asideOverlay;
    private readonly _handleAsideOverlayClick;
    private readonly _handleOverlayClick;
    private _hovered;
    private _mutationObserver;
    private _overlay;
    private _player;
    private _scrollStrategy;
    private _scrollbarDirectives;
    private _scrollbarDirectivesSubscription;
    private _unsubscribeAll;
    constructor(_document: Document, _animationBuilder: AnimationBuilder, _changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef, _renderer2: Renderer2, _router: Router, _scrollStrategyOptions: ScrollStrategyOptions, _navigationService: NavigationService);
    get classList(): any;
    get styleList(): any;
    set scrollbarDirectives(scrollbarDirectives: QueryList<ScrollbarDirective>);
    private _onMouseenter;
    private _onMouseleave;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    refresh(): void;
    open(): void;
    close(): void;
    toggle(): void;
    openAside(item: NavigationItem): void;
    closeAside(): void;
    toggleAside(item: NavigationItem): void;
    private _enableAnimations;
    private _disableAnimations;
    private _showOverlay;
    private _hideOverlay;
    private _showAsideOverlay;
    private _hideAsideOverlay;
    private _toggleOpened;
    static ɵfac: i0.ɵɵFactoryDeclaration<VerticalNavigationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<VerticalNavigationComponent, "vertical-navigation", ["verticalNavigation"], { "appearance": { "alias": "appearance"; "required": false; }; "autoCollapse": { "alias": "autoCollapse"; "required": false; }; "inner": { "alias": "inner"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "name": { "alias": "name"; "required": false; }; "navigation": { "alias": "navigation"; "required": false; }; "opened": { "alias": "opened"; "required": false; }; "position": { "alias": "position"; "required": false; }; "transparentOverlay": { "alias": "transparentOverlay"; "required": false; }; }, { "appearanceChanged": "appearanceChanged"; "modeChanged": "modeChanged"; "openedChanged": "openedChanged"; "positionChanged": "positionChanged"; }, never, ["[verticalNavigationHeader]", "[verticalNavigationContentHeader]", "[verticalNavigationContentFooter]", "[verticalNavigationFooter]"], true, never>;
}
