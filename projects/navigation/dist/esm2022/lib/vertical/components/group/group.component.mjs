import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { NgClass, NgFor, NgIf } from '@angular/common';
import { SvgIconModule } from '@libs/svg-icon';
import { Subject, takeUntil } from 'rxjs';
import { VerticalNavigationBasicItemComponent } from '../../components/basic/basic.component';
import { VerticalNavigationCollapsableItemComponent } from '../../components/collapsable/collapsable.component';
import { VerticalNavigationDividerItemComponent } from '../../components/divider/divider.component';
import { VerticalNavigationSpacerItemComponent } from '../../components/spacer/spacer.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../navigation.service";
import * as i2 from "@libs/svg-icon";
export class VerticalNavigationGroupItemComponent {
    _changeDetectorRef;
    _navigationService;
    static ngAcceptInputType_autoCollapse;
    autoCollapse;
    item;
    name;
    _verticalNavigationComponent;
    _unsubscribeAll = new Subject();
    constructor(_changeDetectorRef, _navigationService) {
        this._changeDetectorRef = _changeDetectorRef;
        this._navigationService = _navigationService;
    }
    // -----------------------------------------------------------------------------------------------------
    // @ Lifecycle hooks
    // -----------------------------------------------------------------------------------------------------
    ngOnInit() {
        // Get the parent navigation component
        this._verticalNavigationComponent = this._navigationService.getComponent(this.name);
        // Subscribe to onRefreshed on the navigation component
        this._verticalNavigationComponent.onRefreshed
            .pipe(takeUntil(this._unsubscribeAll))
            .subscribe(() => {
            // Mark for check
            this._changeDetectorRef.markForCheck();
        });
    }
    ngOnDestroy() {
        this._unsubscribeAll.next(null);
        this._unsubscribeAll.complete();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: VerticalNavigationGroupItemComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NavigationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.8", type: VerticalNavigationGroupItemComponent, isStandalone: true, selector: "vertical-navigation-group-item", inputs: { autoCollapse: "autoCollapse", item: "item", name: "name" }, ngImport: i0, template: "<!-- Item wrapper -->\n<div\n  class=\"vertical-navigation-item-wrapper\"\n  [class.vertical-navigation-item-has-subtitle]=\"!!item.subtitle\"\n  [ngClass]=\"item.classes?.wrapper\"\n>\n  <div class=\"vertical-navigation-item\">\n    <!-- Icon -->\n    @if (item.icon) {\n      <svg-icon\n        class=\"vertical-navigation-item-icon\"\n        [ngClass]=\"item.classes?.icon\"\n        [name]=\"item.icon\"\n      />\n    }\n\n    <!-- Title & Subtitle -->\n    <div class=\"vertical-navigation-item-title-wrapper\">\n      <div class=\"vertical-navigation-item-title\">\n        <span [ngClass]=\"item.classes?.title\">\n          {{ item.title }}\n        </span>\n      </div>\n      @if (item.subtitle) {\n        <div class=\"vertical-navigation-item-subtitle\">\n          <span [ngClass]=\"item.classes?.subtitle\">\n            {{ item.subtitle }}\n          </span>\n        </div>\n      }\n    </div>\n\n    <!-- Badge -->\n    @if (item.badge) {\n      <div class=\"vertical-navigation-item-badge\">\n        <div\n          class=\"vertical-navigation-item-badge-content\"\n          [ngClass]=\"item.badge.classes\"\n        >\n          {{ item.badge.title }}\n        </div>\n      </div>\n    }\n  </div>\n</div>\n\n@for (item of item.children; track item.id) {\n  <!-- Skip the hidden items -->\n  @if ((item.hidden && !item.hidden(item)) || !item.hidden) {\n    <!-- Basic -->\n    @if (item.type === 'basic') {\n      <vertical-navigation-basic-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n\n    <!-- Collapsable -->\n    @if (item.type === 'collapsable') {\n      <vertical-navigation-collapsable-item\n        [item]=\"item\"\n        [name]=\"name\"\n        [autoCollapse]=\"autoCollapse\"\n      />\n    }\n\n    <!-- Divider -->\n    @if (item.type === 'divider') {\n      <vertical-navigation-divider-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n\n    <!-- Group -->\n    @if (item.type === 'group') {\n      <vertical-navigation-group-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n\n    <!-- Spacer -->\n    @if (item.type === 'spacer') {\n      <vertical-navigation-spacer-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n  }\n}\n", dependencies: [{ kind: "component", type: i0.forwardRef(() => VerticalNavigationGroupItemComponent), selector: "vertical-navigation-group-item", inputs: ["autoCollapse", "item", "name"] }, { kind: "directive", type: i0.forwardRef(() => NgClass), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: i0.forwardRef(() => SvgIconModule) }, { kind: "component", type: i0.forwardRef(() => i2.SvgIcon), selector: "svg-icon", inputs: ["inline", "name", "fontSet", "fontIcon"], exportAs: ["svgIcon"] }, { kind: "component", type: i0.forwardRef(() => VerticalNavigationBasicItemComponent), selector: "vertical-navigation-basic-item", inputs: ["item", "name"] }, { kind: "component", type: i0.forwardRef(() => VerticalNavigationCollapsableItemComponent), selector: "vertical-navigation-collapsable-item", inputs: ["autoCollapse", "item", "name"] }, { kind: "component", type: i0.forwardRef(() => VerticalNavigationDividerItemComponent), selector: "vertical-navigation-divider-item", inputs: ["item", "name"] }, { kind: "component", type: i0.forwardRef(() => VerticalNavigationSpacerItemComponent), selector: "vertical-navigation-spacer-item", inputs: ["item", "name"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: VerticalNavigationGroupItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vertical-navigation-group-item', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgClass,
                        NgIf,
                        NgFor,
                        SvgIconModule,
                        VerticalNavigationBasicItemComponent,
                        VerticalNavigationCollapsableItemComponent,
                        VerticalNavigationDividerItemComponent,
                        VerticalNavigationSpacerItemComponent,
                        forwardRef(() => VerticalNavigationGroupItemComponent),
                    ], template: "<!-- Item wrapper -->\n<div\n  class=\"vertical-navigation-item-wrapper\"\n  [class.vertical-navigation-item-has-subtitle]=\"!!item.subtitle\"\n  [ngClass]=\"item.classes?.wrapper\"\n>\n  <div class=\"vertical-navigation-item\">\n    <!-- Icon -->\n    @if (item.icon) {\n      <svg-icon\n        class=\"vertical-navigation-item-icon\"\n        [ngClass]=\"item.classes?.icon\"\n        [name]=\"item.icon\"\n      />\n    }\n\n    <!-- Title & Subtitle -->\n    <div class=\"vertical-navigation-item-title-wrapper\">\n      <div class=\"vertical-navigation-item-title\">\n        <span [ngClass]=\"item.classes?.title\">\n          {{ item.title }}\n        </span>\n      </div>\n      @if (item.subtitle) {\n        <div class=\"vertical-navigation-item-subtitle\">\n          <span [ngClass]=\"item.classes?.subtitle\">\n            {{ item.subtitle }}\n          </span>\n        </div>\n      }\n    </div>\n\n    <!-- Badge -->\n    @if (item.badge) {\n      <div class=\"vertical-navigation-item-badge\">\n        <div\n          class=\"vertical-navigation-item-badge-content\"\n          [ngClass]=\"item.badge.classes\"\n        >\n          {{ item.badge.title }}\n        </div>\n      </div>\n    }\n  </div>\n</div>\n\n@for (item of item.children; track item.id) {\n  <!-- Skip the hidden items -->\n  @if ((item.hidden && !item.hidden(item)) || !item.hidden) {\n    <!-- Basic -->\n    @if (item.type === 'basic') {\n      <vertical-navigation-basic-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n\n    <!-- Collapsable -->\n    @if (item.type === 'collapsable') {\n      <vertical-navigation-collapsable-item\n        [item]=\"item\"\n        [name]=\"name\"\n        [autoCollapse]=\"autoCollapse\"\n      />\n    }\n\n    <!-- Divider -->\n    @if (item.type === 'divider') {\n      <vertical-navigation-divider-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n\n    <!-- Group -->\n    @if (item.type === 'group') {\n      <vertical-navigation-group-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n\n    <!-- Spacer -->\n    @if (item.type === 'spacer') {\n      <vertical-navigation-spacer-item\n        [item]=\"item\"\n        [name]=\"name\"\n      />\n    }\n  }\n}\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.NavigationService }], propDecorators: { autoCollapse: [{
                type: Input
            }], item: [{
                type: Input
            }], name: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,