import { NgClass } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { SvgIconModule } from '@libs/svg-icon';
import { filter, Subject, takeUntil } from 'rxjs';
import { VerticalNavigationBasicItemComponent } from '../basic/basic.component';
import { VerticalNavigationCollapsableItemComponent } from '../collapsable/collapsable.component';
import { VerticalNavigationDividerItemComponent } from '../divider/divider.component';
import { VerticalNavigationGroupItemComponent } from '../group/group.component';
import { VerticalNavigationSpacerItemComponent } from '../spacer/spacer.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../../navigation.service";
import * as i3 from "@libs/svg-icon";
export class VerticalNavigationAsideItemComponent {
    _changeDetectorRef;
    _router;
    _NavigationService;
    static ngAcceptInputType_autoCollapse;
    static ngAcceptInputType_skipChildren;
    activeItemId;
    autoCollapse;
    item;
    name;
    skipChildren;
    active = false;
    _VerticalNavigationComponent;
    _unsubscribeAll = new Subject();
    constructor(_changeDetectorRef, _router, _NavigationService) {
        this._changeDetectorRef = _changeDetectorRef;
        this._router = _router;
        this._NavigationService = _NavigationService;
    }
    // -----------------------------------------------------------------------------------------------------
    // @ Lifecycle hooks
    // -----------------------------------------------------------------------------------------------------
    ngOnChanges(changes) {
        // Active item id
        if ('activeItemId' in changes) {
            // Mark if active
            this._markIfActive(this._router.url);
        }
    }
    ngOnInit() {
        // Mark if active
        this._markIfActive(this._router.url);
        // Attach a listener to the NavigationEnd event
        this._router.events
            .pipe(filter((event) => event instanceof NavigationEnd), takeUntil(this._unsubscribeAll))
            .subscribe((event) => {
            // Mark if active
            this._markIfActive(event.urlAfterRedirects);
        });
        // Get the parent navigation component
        this._VerticalNavigationComponent = this._NavigationService.getComponent(this.name);
        // Subscribe to onRefreshed on the navigation component
        this._VerticalNavigationComponent.onRefreshed
            .pipe(takeUntil(this._unsubscribeAll))
            .subscribe(() => {
            // Mark for check
            this._changeDetectorRef.markForCheck();
        });
    }
    ngOnDestroy() {
        // Unsubscribe from all subscriptions
        this._unsubscribeAll.next(null);
        this._unsubscribeAll.complete();
    }
    // -----------------------------------------------------------------------------------------------------
    // @ Public methods
    // -----------------------------------------------------------------------------------------------------
    trackByFn(index, item) {
        return item.id || index;
    }
    // -----------------------------------------------------------------------------------------------------
    // @ Private methods
    // -----------------------------------------------------------------------------------------------------
    _hasActiveChild(item, currentUrl) {
        const children = item.children;
        if (!children) {
            return false;
        }
        for (const child of children) {
            if (child.children) {
                if (this._hasActiveChild(child, currentUrl)) {
                    return true;
                }
            }
            // Skip items other than 'basic'
            if (child.type !== 'basic') {
                continue;
            }
            // Check if the child has a link and is active
            if (child.link && this._router.isActive(child.link, child.exactMatch || false)) {
                return true;
            }
        }
        return false;
    }
    _markIfActive(currentUrl) {
        // Check if the activeItemId is equals to this item id
        this.active = this.activeItemId === this.item.id;
        // If the aside has a children that is active,
        // always mark it as active
        if (this._hasActiveChild(this.item, currentUrl)) {
            this.active = true;
        }
        // Mark for check
        this._changeDetectorRef.markForCheck();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VerticalNavigationAsideItemComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.Router }, { token: i2.NavigationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: VerticalNavigationAsideItemComponent, isStandalone: true, selector: "vertical-navigation-aside-item", inputs: { activeItemId: "activeItemId", autoCollapse: "autoCollapse", item: "item", name: "name", skipChildren: "skipChildren" }, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"vertical-navigation-item-wrapper\"\n  [class.vertical-navigation-item-has-subtitle]=\"!!item.subtitle\"\n  [ngClass]=\"item.classes?.wrapper\"\n>\n  <div\n    class=\"vertical-navigation-item\"\n    [ngClass]=\"{\n      'vertical-navigation-item-active': active,\n      'vertical-navigation-item-disabled': item.disabled,\n      'vertical-navigation-item-active-forced': item.active,\n    }\"\n  >\n    <!-- Icon -->\n    @if (item.icon) {\n      <svg-icon\n        class=\"vertical-navigation-item-icon\"\n        [ngClass]=\"item.classes?.icon\"\n        [name]=\"item.icon\"\n      />\n    }\n\n    <!-- Title & Subtitle -->\n    <div class=\"vertical-navigation-item-title-wrapper\">\n      <div class=\"vertical-navigation-item-title\">\n        <span [ngClass]=\"item.classes?.title\">\n          {{ item.title }}\n        </span>\n      </div>\n      @if (item.subtitle) {\n        <div class=\"vertical-navigation-item-subtitle\">\n          <span [ngClass]=\"item.classes?.subtitle\">\n            {{ item.subtitle }}\n          </span>\n        </div>\n      }\n    </div>\n\n    <!-- Badge -->\n    @if (item.badge) {\n      <div class=\"vertical-navigation-item-badge\">\n        <div\n          class=\"vertical-navigation-item-badge-content\"\n          [ngClass]=\"item.badge.classes\"\n        >\n          {{ item.badge.title }}\n        </div>\n      </div>\n    }\n  </div>\n</div>\n\n@if (!skipChildren) {\n  <div class=\"vertical-navigation-item-children\">\n    @for (item of item.children; track item.id) {\n      <!-- Skip the hidden items -->\n      @if ((item.hidden && !item.hidden(item)) || !item.hidden) {\n        <!-- Basic -->\n        @if (item.type === 'basic') {\n          <vertical-navigation-basic-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n\n        <!-- Collapsable -->\n        @if (item.type === 'collapsable') {\n          <vertical-navigation-collapsable-item\n            [item]=\"item\"\n            [name]=\"name\"\n            [autoCollapse]=\"autoCollapse\"\n          />\n        }\n\n        <!-- Divider -->\n        @if (item.type === 'divider') {\n          <vertical-navigation-divider-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n\n        <!-- Group -->\n        @if (item.type === 'group') {\n          <vertical-navigation-group-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n\n        <!-- Spacer -->\n        @if (item.type === 'spacer') {\n          <vertical-navigation-spacer-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n      }\n    }\n  </div>\n}\n", dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: SvgIconModule }, { kind: "component", type: i3.SvgIcon, selector: "svg-icon", inputs: ["inline", "name", "fontSet", "fontIcon"], exportAs: ["svgIcon"] }, { kind: "component", type: VerticalNavigationBasicItemComponent, selector: "vertical-navigation-basic-item", inputs: ["item", "name"] }, { kind: "component", type: VerticalNavigationCollapsableItemComponent, selector: "vertical-navigation-collapsable-item", inputs: ["autoCollapse", "item", "name"] }, { kind: "component", type: VerticalNavigationDividerItemComponent, selector: "vertical-navigation-divider-item", inputs: ["item", "name"] }, { kind: "component", type: VerticalNavigationGroupItemComponent, selector: "vertical-navigation-group-item", inputs: ["autoCollapse", "item", "name"] }, { kind: "component", type: VerticalNavigationSpacerItemComponent, selector: "vertical-navigation-spacer-item", inputs: ["item", "name"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VerticalNavigationAsideItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vertical-navigation-aside-item', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgClass,
                        SvgIconModule,
                        VerticalNavigationBasicItemComponent,
                        VerticalNavigationCollapsableItemComponent,
                        VerticalNavigationDividerItemComponent,
                        VerticalNavigationGroupItemComponent,
                        VerticalNavigationSpacerItemComponent,
                    ], template: "<div\n  class=\"vertical-navigation-item-wrapper\"\n  [class.vertical-navigation-item-has-subtitle]=\"!!item.subtitle\"\n  [ngClass]=\"item.classes?.wrapper\"\n>\n  <div\n    class=\"vertical-navigation-item\"\n    [ngClass]=\"{\n      'vertical-navigation-item-active': active,\n      'vertical-navigation-item-disabled': item.disabled,\n      'vertical-navigation-item-active-forced': item.active,\n    }\"\n  >\n    <!-- Icon -->\n    @if (item.icon) {\n      <svg-icon\n        class=\"vertical-navigation-item-icon\"\n        [ngClass]=\"item.classes?.icon\"\n        [name]=\"item.icon\"\n      />\n    }\n\n    <!-- Title & Subtitle -->\n    <div class=\"vertical-navigation-item-title-wrapper\">\n      <div class=\"vertical-navigation-item-title\">\n        <span [ngClass]=\"item.classes?.title\">\n          {{ item.title }}\n        </span>\n      </div>\n      @if (item.subtitle) {\n        <div class=\"vertical-navigation-item-subtitle\">\n          <span [ngClass]=\"item.classes?.subtitle\">\n            {{ item.subtitle }}\n          </span>\n        </div>\n      }\n    </div>\n\n    <!-- Badge -->\n    @if (item.badge) {\n      <div class=\"vertical-navigation-item-badge\">\n        <div\n          class=\"vertical-navigation-item-badge-content\"\n          [ngClass]=\"item.badge.classes\"\n        >\n          {{ item.badge.title }}\n        </div>\n      </div>\n    }\n  </div>\n</div>\n\n@if (!skipChildren) {\n  <div class=\"vertical-navigation-item-children\">\n    @for (item of item.children; track item.id) {\n      <!-- Skip the hidden items -->\n      @if ((item.hidden && !item.hidden(item)) || !item.hidden) {\n        <!-- Basic -->\n        @if (item.type === 'basic') {\n          <vertical-navigation-basic-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n\n        <!-- Collapsable -->\n        @if (item.type === 'collapsable') {\n          <vertical-navigation-collapsable-item\n            [item]=\"item\"\n            [name]=\"name\"\n            [autoCollapse]=\"autoCollapse\"\n          />\n        }\n\n        <!-- Divider -->\n        @if (item.type === 'divider') {\n          <vertical-navigation-divider-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n\n        <!-- Group -->\n        @if (item.type === 'group') {\n          <vertical-navigation-group-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n\n        <!-- Spacer -->\n        @if (item.type === 'spacer') {\n          <vertical-navigation-spacer-item\n            [item]=\"item\"\n            [name]=\"name\"\n          />\n        }\n      }\n    }\n  </div>\n}\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.Router }, { type: i2.NavigationService }], propDecorators: { activeItemId: [{
                type: Input
            }], autoCollapse: [{
                type: Input
            }], item: [{
                type: Input
            }], name: [{
                type: Input
            }], skipChildren: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,